input {
   beats {
      port => 5044
   }
}

filter {
   grok {
      match => {
         "message" => "%{TIMESTAMP_ISO8601:timestamp}\s+%{HOSTNAME:hostname}\s+%{WORD:program}\[%{INT:pid}\]:\s+(.*)"
      }
   }

   # IP 주소 추출 (로그 메시지에서 'from IP_ADDRESS' 패턴을 찾아서 ip_address 필드에 저장)
   grok {
      match => {
         "message" => "from\s+(?<ip_address>\d+\.\d+\.\d+\.\d+)"
      }
   }

   # 접속 상태 구분 (성공/실패 및 연결 끊김 여부)
   if "Accepted password" in [message] or "Accepted publickey" in [message] {
      mutate {
         add_field => {
            "connection_status" => "success"
         }
      }
   } else if "Failed password" in [message] {
      mutate {
         add_field => {
            "connection_status" => "failed"
         }
      }
   } else if "Connection reset" in [message] {
      mutate {
         add_field => {
            "connection_status" => "connection_reset"
         }
      }
   }

   # 불필요한 필드 제거
   mutate {
      remove_field => ["ecs", "host", "@version", "agent", "log", "tags", "input", "date"]
   }

   # 타임스탬프 포맷 변환
   date {
      match => ["timestamp", "ISO8601"]  # timestamp를 Date 타입으로 변환
      timezone => "Asia/Seoul"
      target => "@timestamp"  # @timestamp 필드에 저장
   }
}

output {
   elasticsearch {
      hosts => ["http://localhost:9200"]
      index => "ubuntu"
      document_id => "%{timestamp}"  # Using timestamp as the unique ID
   }

   jdbc {
      driver_jar_path => "C:\\02.devEnv\\ELK\\logstash-7.11.1\\logstash-core\\lib\\jars\\mysql-connector-j-9.1.0.jar"
      driver_class => "com.mysql.jdbc.Driver"
      connection_string => "jdbc:mysql://localhost:3306/fisa"
      username => "user01"
      password => "user01"
      statement => [
         "INSERT INTO logs (timestamp, hostname, program, ip_address, connection_status, pid, message, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, NOW())",
         "timestamp",
         "hostname",
         "program",
         "ip_address",
         "connection_status",
         "pid",
         "message"
      ]
   }
}
